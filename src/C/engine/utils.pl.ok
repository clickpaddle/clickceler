:- module(utils, [
    replace_event_with_dict/3,
    replace_event_with_dict_one/3,
    match_all_conditions/2,
    match_condition/2,
    apply_matching_rules/3,
    apply_transformations/3,
    equal_values/2,
    not_equal_values/2,
    greater_than/2,
    greater_equal/2,
    less_than/2,
    less_equal/2,
    memberchk_conv/2
]).

%% ========================
%% === MATCH CONDITIONS ===
%% ========================

% Replace all occurence of E by conditions and actions 
replace_event_with_dict([], _, []).

replace_event_with_dict([H|T], E, [H2|T2]) :-
    replace_event_with_dict_one(H, E, H2),
    replace_event_with_dict(T, E, T2).

% Remplacement dans un prÃ©dicat : eq(E, Field, Value) -> eq(Field, Value)
replace_event_with_dict_one(eq(E, Field, Value), E, eq(Field, Value)).
replace_event_with_dict_one(set_field(E, Field, Value), E, set_field(Field, Value)).
replace_event_with_dict_one(add_tag(Tag), _, add_tag(Tag)).
replace_event_with_dict_one(remove_tag(Tag), _, remove_tag(Tag)).
replace_event_with_dict_one(increment_field(Field), _, increment_field(Field)).

%  Clause catch-all 
replace_event_with_dict_one(Other, _, Other).

% match_all_conditions(+Conditions, +Dict)
match_all_conditions([], _).
match_all_conditions([Cond | Rest], Dict) :-
    match_condition(Cond, Dict),
    match_all_conditions(Rest, Dict).

% match_condition(+Condition, +Dict)
match_condition(eq(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    equal_values(V, Value).

match_condition(neq(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    not_equal_values(V, Value).

match_condition(gt(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    greater_than(V, Value).

match_condition(gte(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    greater_equal(V, Value).

match_condition(lt(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    less_than(V, Value).

match_condition(lte(Field, Value), Dict) :-
    get_dict(Field, Dict, V),
    less_equal(V, Value).

match_condition(in(Field, List), Dict) :-
    get_dict(Field, Dict, V),
    memberchk_conv(V, List).

match_condition(nin(Field, List), Dict) :-
    get_dict(Field, Dict, V),
    \+ memberchk_conv(V, List).


%% =========================
%% === APPLY RULE ENGINE ===
%% =========================

% apply_matching_rules(+Rules, +DictIn, -DictOut)
apply_matching_rules([], Dict, Dict).
apply_matching_rules([rule(_P, RuleID, _Conds, Transforms) | Rest], DictIn, DictOut) :-
    format('[Refine] Applying rule ~w~n', [RuleID]),
    apply_transformations(Transforms, DictIn, DictNext),
    apply_matching_rules(Rest, DictNext, DictOut).


%% ============================
%% === TRANSFORMATIONS CORE ===
%% ============================

% apply_transformations(+TransformList, +DictIn, -DictOut)
apply_transformations([], Dict, Dict).

% Transformation: set_field(Key, Value)
apply_transformations([set_field(Key, Value) | Rest], DictIn, DictOut) :-
    put_dict(Key, DictIn, Value, DictNext),
    apply_transformations(Rest, DictNext, DictOut).

% Transformation: add_tag(Tag)
apply_transformations([add_tag(Tag) | Rest], DictIn, DictOut) :-
    ( get_dict(tags, DictIn, Tags0) -> true ; Tags0 = [] ),
    ( memberchk(Tag, Tags0) -> Tags1 = Tags0 ; Tags1 = [Tag | Tags0] ),
    put_dict(tags, DictIn, Tags1, DictNext),
    apply_transformations(Rest, DictNext, DictOut).

% Transformation: remove_tag(Tag)
apply_transformations([remove_tag(Tag) | Rest], DictIn, DictOut) :-
    ( get_dict(tags, DictIn, Tags0) -> true ; Tags0 = [] ),
    delete(Tags0, Tag, Tags1),
    put_dict(tags, DictIn, Tags1, DictNext),
    apply_transformations(Rest, DictNext, DictOut).

% Transformation: increment_field(Field)
apply_transformations([increment_field(Field) | Rest], DictIn, DictOut) :-
    ( get_dict(Field, DictIn, Val), number(Val) ->
        NewVal is Val + 1,
        put_dict(Field, DictIn, NewVal, DictNext)
    ;   put_dict(Field, DictIn, 1, DictNext)
    ),
    apply_transformations(Rest, DictNext, DictOut).

% Unknown transformation
apply_transformations([Unknown | Rest], DictIn, DictOut) :-
    format('[Refine] Warning: Unknown transformation ~w~n', [Unknown]),
    apply_transformations(Rest, DictIn, DictOut).


%% ========================
%% === VALUE COMPARISON ===
%% ========================

% to_string(+Value, -Str)
to_string(Value, Str) :-
    ( atom(Value) -> atom_string(Value, Str)
    ; string(Value) -> Str = Value
    ; term_to_atom(Value, Str)
    ).

% equal_values(+V1, +V2)
equal_values(V1, V2) :-
    to_string(V1, S1),
    to_string(V2, S2),
    S1 == S2.

% not_equal_values(+V1, +V2)
not_equal_values(V1, V2) :-
    \+ equal_values(V1, V2).

% greater_than(+V1, +V2)
greater_than(V1, V2) :-
    to_string(V1, S1),
    to_string(V2, S2),
    S1 @> S2.

% greater_equal(+V1, +V2)
greater_equal(V1, V2) :-
    to_string(V1, S1),
    to_string(V2, S2),
    S1 @>= S2.

% less_than(+V1, +V2)
less_than(V1, V2) :-
    to_string(V1, S1),
    to_string(V2, S2),
    S1 @< S2.

% less_equal(+V1, +V2)
less_equal(V1, V2) :-
    to_string(V1, S1),
    to_string(V2, S2),
    S1 @=< S2.

% Checks if the value of Field in event E (converted to string) is in the given list (after converting list elements to strings)
within(E, Field, List) :-
    get_dict(Field, E, Value),
    to_string(Value, S),
    memberchk_string(S, List).

% Checks if the value of Field in event E (converted to string) is NOT in the given list (after converting list elements to strings)
notin(E, Field, List) :-
    get_dict(Field, E, Value),
    to_string(Value, S),
    \+ memberchk_string(S, List).

% Helper predicate: true if string S equals any element of the list after converting them to strings
memberchk_string(_, []) :- fail.
memberchk_string(S, [H | T]) :-
    to_string(H, SH),
    ( S == SH -> true ; memberchk_string(S, T) ).

% memberchk_conv(+V, +List)
memberchk_conv(V, List) :-
    to_string(V, S),
    memberchk_string(S, List).


