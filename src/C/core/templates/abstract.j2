{# Loop over abstract rules and generate one Prolog clause per event #}
{% for rule in abstract_rules %}
{% for event in rule.events %}
abstract_rule({{ rule.name }}, {{ rule.priority }},
    [ {{ event.event }} ],
    [ {% for cond in event.conditions %}{{ cond }}{% if not loop.last %}, {% endif %}{% endfor %} ],
    [ {{ rule.abstract }} ],
    [ {% for s in rule.settings %}settings{ {% for k,v in s.items() %}{{ k }}: {{ v }}{% if not loop.last %}, {% endif %}{% endfor %} }{% if not loop.last %}, {% endif %}{% endfor %} ],
    [ {% for k in rule.keys %}{{ k }}{% if not loop.last %}, {% endif %}{% endfor %} ],
    [ {% for a in rule.actions %}{{ a }},{% endfor %}
      {% for key in rule.keys %}set_field(E, {{ key }}, F.{{ key }}){% if not loop.last %}, {% endif %}{% endfor %} ]
).
{% endfor %}
{% endfor %}
